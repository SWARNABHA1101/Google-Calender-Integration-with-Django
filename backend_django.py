# -*- coding: utf-8 -*-
"""Backend_Django.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q-USx0SDO8b0kdfGanf7f61l7HfhiyK2
"""

from googleapiclient import discovery
from oauth2client import tools
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
import httplib

#---------------------------------------------------------------------------
    # google_calendar_connection
    #---------------------------------------------------------------------------
    def google_calendar_connection():
        """
        This method used for connect with google calendar api.
        """
        
        flags = tools.argparser.parse_args([])
        FLOW = OAuth2WebServerFlow(
            client_id='xxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com',
            client_secret='xxxxxx',
            scope='https://www.googleapis.com/auth/calendar',
            user_agent='<application name>'
            )
        storage = Storage('calendar.dat')
        credentials = storage.get()
        if credentials is None or credentials.invalid == True:
            credentials = tools.run_flow(FLOW, storage, flags)
        
        # Create an httplib2.Http object to handle our HTTP requests and authorize it
        # with our good Credentials.
        http = httplib2.Http()
        http = credentials.authorize(http)
        service = discovery.build('calendar', 'v3', http=http)
        
        return service

def form_valid(self, form):
        """
        This method used for add event in google calendar.
        """
        
        service = self.google_calendar_connection()
        
        event = {
          'summary': "new",
          'location': "london",
          'description': "anything",
          'start': {
            'date': "2022-04-16",
          },
          'end': {
            'date': "2022-04-16",
          },
                 
        }
        
        event = service.events().insert(calendarId='primary', body=event).execute()
        
        return CreateView.form_valid(self, form)